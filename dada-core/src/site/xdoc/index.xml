<?xml version="1.0"?>

<document>
  
  <properties>
    <title>Distributed Assimilation and Dissemination Architecture</title>
  </properties>

  <body>
    <section name="DADA - Distributed Assimilation and Dissemination Architecture">
      
      <p/>

      DADA started life as a set of Java components for building a
      highly concurrent and distributed graph of interconnected MVC
      Models and Views.

      <p/>
      
      We then found that DADA was growing into a n-dimensional data
      cube, with an ad-hoc query language and real time query/view
      updates.

      <p/>
      
      Then we discovered Event Driven Architecture (EDA) and Complex
      Event Processing (CEP) and realised that DADA was actually a CEP
      engine.

      <p/>
      
      Here is how DADA works:

      <p/>

      Events are fed into the system as updates to interested Models.

      <p/>

      Models encapsulate state. They maintain a set of interested Views
      and notify them of changes to this state.

      <p/>

      Views may view a Model, in which case they receive updates
      notifying them about changes to the Model's state.

      <p/>

      A component may implement both View and Model interfaces. It may
      simply receive inputs and produce outputs on a one-to-one basis,
      or on any basis that it sees fit. Its inputs and outputs may be
      of the same type or it may transform its inputs into a different
      output type.

      <p/>
      
      Splitters (a type of View) may be used to decouple a Model from a
      set of Views and encapsulate logic to efficiently route incoming
      events to particular members of this set based on pluggable
      strategies.
      
      <p/>

      Reducers (a type of Model/View) may be used to transform and
      collapse/reduce incoming data into e.g. a current total, changes
      to which are once again, notified to upstream Views.

      <p/>

      A MetaModel provides interested Views with information about the
      creation and destruction of the system's Models.

      <p/>

      Components may be connected to each other directly for
      synchronous, serial, local interaction, or proxied for
      transparent asynchronous, concurrent, remotable interactions.

      <p/>

      With this basic set of components and some implementations to
      fit your problem domain and middleware, it is possible to
      produce highly scalable, distributed, resilient applications,
      partitioning, transforming, aggregating, slicing, dicing and
      displaying very large dynamic datasets in real time.

      <p/>

      With the addition of an ad-hoc query language implemented in
      Clojure, development of such models can be simplified and moved
      from a compile-time to a run-time environment accelerating
      productivity and potentially putting query content into the
      hands of the user rather than the developer.

      <p/>

      DADA makes use of IOC, pluggable interfaces, factories,
      strategies and generics for strict typing throughout,
      prioritises concurrency issues and tries to remain small,
      simple, flexible, performant and clean. A substantial testsuite
      ensures the quality of the code and the whole project is rebuilt
      and unit tested on a number of modern JVMs (Sun, OpenJDK, IBM
      and BEA 6 &amp; 7 32/64 bit on Solaris and Linux) on every
      checkin.

      <p/>

      We hope you enjoy DADA !

    </section>
  </body>

</document>
